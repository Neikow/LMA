//MESH FOR WAVE PROPAGATION IN BALLAST
//Lúcio Correa (lucio.de-abreu-correa@ecp.fr)
//geometry based on a trackway report
// École Centrale Paris @ 21-05-2015

//NUMEBER OF TRAVERSEs
traverse = 10;

//GEOMETRICAL DEFINITIONS

B_h =  0.48; //ballast height (y)
B_wu = 6.0; //ballast width upper (x)
B_wl = 8; //ballast width lower (x)

Z = 1;

S_h =  3; //soil height (y)
S_w =  12; //soil width (x)

T_w = 2.0; //traverse width (x)
T_h = 0.2; //traverse height (y)
T_t = 0.3; //traverse thickness (z)
D_c = 0.25; //distance from the center of the model

T_esp = 0.6; //space between 2 traverses
D_pml1 = 0.6; //


PML_t= 1;//PML width

//MESH DEFINITIONS

//n_layers = 20; //layers number of domain
n_PML    = 1; //layers number of PML domain
n_layersTraverse = 2; //number of elements in (y) direction
//out of ballast
Ma = 0.3;
n_spa = T_esp/Ma; //entre dormentes
ele_Dpml1 = n_spa;//primeira extrusao 
n_tra = T_t/Ma;//no dormente

//mesh size control
Lc = 0.6;
Lc_b = 0.1;

// PONITS

//ballast
Point(1) = {-B_wl/2,  0,Z,Lc_b};
Point(2) = { B_wl/2,  0,Z,Lc_b};
Point(3) = { B_wu/2,B_h,Z,Lc_b};
Point(4) = {-B_wu/2,B_h,Z,Lc_b};

//soil
Point(5) = {-S_w/2,-S_h,Z,Lc};
Point(6) = { S_w/2,-S_h,Z,Lc};
Point(7) = { S_w/2, 0.0,Z,Lc};
Point(8) = {-S_w/2, 0.0,Z,Lc};

//Perfect Matched Layer (PML)
Point(9) =  {-S_w/2-PML_t,-S_h-PML_t,Z,Lc};
Point(10) = {      -S_w/2,-S_h-PML_t,Z,Lc};
Point(11) = {       S_w/2,-S_h-PML_t,Z,Lc};
Point(12) = { S_w/2+PML_t,-S_h-PML_t,Z,Lc};
Point(13) = { S_w/2+PML_t,      -S_h,Z,Lc};
Point(14) = { S_w/2+PML_t,       0.0,Z,Lc};
Point(15) = {-S_w/2-PML_t,       0.0,Z,Lc};
Point(16) = {-S_w/2-PML_t,      -S_h,Z,Lc};

//traverse 1
Point(17) = {-T_w-D_c,-T_h/2+B_h,Z,Lc_b};
Point(18) = {    -D_c,-T_h/2+B_h,Z,Lc_b};
Point(19) = {    -D_c,     0+B_h,Z,Lc_b};
Point(20) = {-T_w-D_c,     0+B_h,Z,Lc_b};

//traverse 2
Point(21) = {    +D_c,-T_h/2+B_h,Z,Lc_b};
Point(22) = {+T_w+D_c,-T_h/2+B_h,Z,Lc_b};
Point(23) = {+T_w+D_c,     0+B_h,Z,Lc_b};
Point(24) = {    +D_c,     0+B_h,Z,Lc_b};

//LINES

//ballast
Line(1)={1,2};
Line(2)={2,3};
Line(3)={3,23};
Line(31)={23,24};
Line(32)={24,19};
Line(33)={19,20};
Line(34)={20,4};
Line(4)={4,1};

//soil
Line(5)={5,6};
Line(6)={6,7};
Line(7)={7,2};
Line(8)={2,1};
Line(9)={1,8};
Line(10)={8,5};

//PML (1)
Line(11)={16,5};
Line(12)={5,8};
Line(13)={8,15};
Line(14)={15,16};

//PML (2)
Line(15)={9,10};
Line(16)={10,5};
Line(17)={5,16};
Line(18)={16,9};

//PML (3)
Line(19)={10,11};
Line(20)={11,6};
Line(21)={6,5};
Line(22)={5,10};

//PML (4)
Line(23)={11,12};
Line(24)={12,13};
Line(25)={13,6};
Line(26)={6,11};

//PML (5)
Line(27)={6,13};
Line(28)={13,14};
Line(29)={14,7};
Line(30)={7,6};

//sleepers
Line(35)={20,17};
Line(36)={17,18};
Line(37)={18,19};

Line(38)={24,21};
Line(39)={21,22};
Line(40)={22,23};

//MAKE THE LOOPS AND SURFACES

//ballast
Line Loop(1) = {1,2,3,-40,-39,-38,32,-37,-36,-35,34,4};
Plane Surface(1) = {1};

//soil
Line Loop(2) = {5,6,7,8,9,10};
Plane Surface(2) = {2};

//PML1
Line Loop(3) = {11,12,13,14};
Plane Surface(3) = {3};

//PML2
Line Loop(4) = {15,16,17,18};
Plane Surface(4) = {4};

//PML3
Line Loop(5) = {19,20,21,22};
Plane Surface(5) = {5};

//PML4
Line Loop(6) = {23,24,25,26};
Plane Surface(6) = {6};

//PML5
Line Loop(7) = {27,28,29,30};
Plane Surface(7) = {7};

//sleepers
Line Loop(8) = {33,35,36,37};
Plane Surface(8) = {8};

//sleepers
Line Loop(9) = {31,38,39,40};
Plane Surface(9) = {9};


// Tell Gmsh how many cells you want per edge
//Transfinite Line{1}   = n_b;
Transfinite Line{11,13,15,16,17,18,20,22,23,24,25,26,27,29}=1;

// Tell Gmsh what the corner points are
//(going clockwise or counter-clockwise):
//Transfinite Surface{1} = {1,2,3,4}; 
//Transfinite Surface{2} = {5,6,7,8}; 
Transfinite Surface{3} = {16,5,8,15};
Transfinite Surface{4} = {9,10,5,16}; 
Transfinite Surface{5} = {10,11,6,5}; 
Transfinite Surface{6} = {11,12,13,6}; 
Transfinite Surface{7} = {6,13,14,7};
Transfinite Surface{8} = {17,18,19,20};
Transfinite Surface{9} = {21,22,23,24};

// Recombine the triangles into quads:
Recombine Surface{1};
Recombine Surface{2};
Recombine Surface{3};
Recombine Surface{4};
Recombine Surface{5};
Recombine Surface{6};
Recombine Surface{7};
Recombine Surface{8};
Recombine Surface{9};

// Havent tested this yet, but doesnt seem to hurt:
Mesh.Smoothing = 200;

// Extrued for a psudo 2D mesh -PML 1- :)
Extrude {0,0,PML_t} {Surface{1,2,3,4,5,6,7,8,9}; Layers{n_PML}; Recombine; }

primeira = 102;
diff = 22;
// Extrued for a psudo 2D mesh -PML 1- :)
Extrude {0,0,D_pml1} {Surface{primeira,primeira+32,primeira+32+1*diff,primeira+32+2*diff,primeira+32+3*diff,primeira+32+4*diff,primeira+32+5*diff,primeira+32+6*diff,primeira+32+7*diff}; Layers{ele_Dpml1}; Recombine; }


For(1:traverse)

primeira = primeira + 248;
// Extrued for a psudo 2D mesh -PML 1- :)
Extrude {0,0,T_t} {Surface{primeira,primeira+32,primeira+32+1*diff,primeira+32+2*diff,primeira+32+3*diff,primeira+32+4*diff,primeira+32+5*diff,primeira+32+6*diff,primeira+32+7*diff}; Layers{n_tra}; Recombine; }

primeira = primeira + 248;
// Extrued for a psudo 2D mesh -PML 1- :)
Extrude {0,0,T_esp} {Surface{primeira,primeira+32,primeira+32+1*diff,primeira+32+2*diff,primeira+32+3*diff,primeira+32+4*diff,primeira+32+5*diff,primeira+32+6*diff,primeira+32+7*diff}; Layers{n_spa}; Recombine; }

EndFor


primeira = primeira + 248;
// Extrued for a psudo 2D mesh -PML 1- :)
Extrude {0,0,PML_t} {Surface{primeira,primeira+32,primeira+32+1*diff,primeira+32+2*diff,primeira+32+3*diff,primeira+32+4*diff,primeira+32+5*diff,primeira+32+6*diff,primeira+32+7*diff}; Layers{n_PML}; Recombine; }


//traverse
primeira = 749;

For(1:traverse)

Recombine Surface{primeira};

Extrude {0,T_h/2,0} {Surface{primeira,primeira+22}; Layers{n_layersTraverse}; Recombine; }

primeira = primeira+496;

EndFor

Physical Volume ( 1  ) = { 1,8,9 };
Physical Volume ( 2  ) = { 2 };
Physical Volume ( 3  ) = { 3 };
Physical Volume ( 4  ) = { 4 };
Physical Volume ( 5  ) = { 5 };
Physical Volume ( 6  ) = { 6 };
Physical Volume ( 7  ) = { 7 };

count = 1;
For(1:2*traverse+1)
V8 (count-1) = count*9 +1;
V9 (count-1) = count*9 +2;
V10(count-1) = count*9 +3;
V11(count-1) = count*9 +4;
V12(count-1) = count*9 +5;
V13(count-1) = count*9 +6;
V14(count-1) = count*9 +7;
count = count+1;
EndFor

count = 1;
For(1:traverse+1)
V15 (count-1) = count*18-1;
V16 (count-1) = count*18;
count = count+1;
EndFor

count = 1;
For(1:traverse)
V22(count-1)= count*18+8;
V23(count-1)= count*18+9;
count = count+1;
EndFor

count = 1;
For(1:2*traverse)
V24 (count-1) = 9*(2*traverse+2)+9+count;
count = count+1;
EndFor

Physical Volume ( 8 ) = {V8[],V15[],V16[]};
Physical Volume ( 9 ) = {V9[]};
Physical Volume ( 10 ) = {V10[]};
Physical Volume ( 11 ) = {V11[]};
Physical Volume ( 12 ) = {V12[]};
Physical Volume ( 13 ) = {V13[]};
Physical Volume ( 14 ) = {V14[]};

Physical Volume ( 22 ) = {V22[],V23[],V24[]};

Physical Volume ( 15 ) = { 9*(2*traverse+2)+1,9*(2*traverse+2)+9,9*(2*traverse+2)+8};
Physical Volume ( 16 ) = { 9*(2*traverse+2)+2 };
Physical Volume ( 17 ) = { 9*(2*traverse+2)+3 };
Physical Volume ( 18 ) = { 9*(2*traverse+2)+4 };
Physical Volume ( 19 ) = { 9*(2*traverse+2)+5 };
Physical Volume ( 20 ) = { 9*(2*traverse+2)+6 };
Physical Volume ( 21 ) = { 9*(2*traverse+2)+7 };

Coherence;